{"version":3,"sources":["entryForm.js","table.js","App.js","serviceWorker.js","index.js"],"names":["EntryForm","state","employeeId","firstName","lastName","address","company","salary","error","change","e","_this","setState","Object","defineProperty","target","name","value","_handleKeyPress","key","preventDefault","length","onSubmit","props","callbackFromApp","_this2","this","react_default","a","createElement","TextField_default","hintText","label","margin","type","onChange","onKeyPress","floatingLabelFixed","Button_default","variant","onClick","primary","Typography_default","component","color","React","Component","withStyles","theme","root","width","marginTop","spacing","unit","overflowX","table","minWidth","classes","Paper_default","className","Table_default","TableHead_default","TableRow_default","TableCell_default","numeric","TableBody_default","employeesFromApp","map","employee","scope","EmployeesQuery","gql","_templateObject","CreateEmployeeMutation","_templateObject2","App","sum","createEmployee","_callee","regenerator_default","wrap","_context","prev","next","variables","parseInt","update","store","_ref2","data","readQuery","query","employees","unshift","writeQuery","stop","entryFormCallback","dataFromForm","costFunction","_this$props$data","loading","MuiThemeProvider_default","Grid_default","container","alignItems","direction","justify","item","style","paddingLeft","paddingTop","paddingBottom","entryForm_EntryForm","compose","graphql","Boolean","window","location","hostname","match","client","ApolloClient","uri","ReactDOM","render","react_apollo_browser_umd","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.33d1073d.chunk.js","sourcesContent":["import React from \"react\";\nimport TextField from \"material-ui/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\n\nexport default class EntryForm extends React.Component {\n  state = {\n    employeeId: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    address: \"\",\n    company: \"\",\n    salary: \"\",\n    error: \"\"\n  };\n\n  change = e => {\n    this.setState({\n      error: \"\"\n    });\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  _handleKeyPress = e => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      if (\n        this.state.employeeId != null &&\n        this.state.employeeId.length > 0 &&\n        this.state.firstName != null &&\n        this.state.firstName.length > 0 &&\n        this.state.lastName != null &&\n        this.state.lastName.length > 0 &&\n        this.state.company != null &&\n        this.state.company.length > 0 &&\n        this.state.salary != null &&\n        this.state.salary.length > 0\n      ) {\n        this.onSubmit(e);\n      } else {\n        this.setState({\n          error: \"All but 'Address' must be filled out\"\n        });\n      }\n    }\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n    this.props.callbackFromApp(this.state);\n    // clear form\n    this.setState({\n      employeeId: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      address: \"\",\n      company: \"\",\n      salary: \"\"\n    });\n  };\n\n  render() {\n    return (\n      <form>\n        <TextField\n          name=\"employeeId\"\n          hintText=\"Employee ID\"\n          label=\"Employee ID\"\n          margin=\"normal\"\n          type=\"number\"\n          value={this.state.employeeId}\n          onChange={e => this.change(e)}\n          onKeyPress={e => {\n            this._handleKeyPress(e);\n          }}\n        />\n        <br />\n        <TextField\n          name=\"firstName\"\n          hintText=\"First Name\"\n          label=\"First Name\"\n          margin=\"normal\"\n          value={this.state.firstName}\n          onChange={e => this.change(e)}\n          onKeyPress={e => {\n            this._handleKeyPress(e);\n          }}\n          floatingLabelFixed\n        />\n        <br />\n        <TextField\n          name=\"lastName\"\n          hintText=\"Last Name\"\n          label=\"Last Name\"\n          margin=\"normal\"\n          value={this.state.lastName}\n          onChange={e => this.change(e)}\n          onKeyPress={e => {\n            this._handleKeyPress(e);\n          }}\n          floatingLabelFixed\n        />\n        <br />\n        <TextField\n          name=\"address\"\n          hintText=\"Address\"\n          label=\"Address\"\n          margin=\"normal\"\n          value={this.state.address}\n          onChange={e => this.change(e)}\n          onKeyPress={e => {\n            this._handleKeyPress(e);\n          }}\n          floatingLabelFixed\n        />\n        <br />\n        <TextField\n          name=\"company\"\n          hintText=\"Company\"\n          label=\"Company\"\n          margin=\"normal\"\n          value={this.state.company}\n          onChange={e => this.change(e)}\n          onKeyPress={e => {\n            this._handleKeyPress(e);\n          }}\n          floatingLabelFixed\n        />\n        <br />\n        <TextField\n          name=\"salary\"\n          hintText=\"Salary\"\n          label=\"Salary\"\n          margin=\"normal\"\n          type=\"number\"\n          value={this.state.salary}\n          onChange={e => this.change(e)}\n          onKeyPress={e => {\n            this._handleKeyPress(e);\n          }}\n          floatingLabelFixed\n        />\n        <br />\n        <br />\n        <Button\n          variant=\"contained\"\n          onClick={e => this.onSubmit(e)}\n          primary=\"true\"\n        >\n          Submit\n        </Button>\n        <br />\n        <br />\n        <Typography component=\"p\" color=\"error\">\n        {this.state.error}\n        </Typography>\n\n      </form>\n    );\n  }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst styles = theme => ({\n  root: {\n    width: \"100%\",\n    marginTop: theme.spacing.unit * 3,\n    overflowX: \"auto\"\n  },\n  table: {\n    minWidth: 700\n  }\n});\n\nfunction SimpleTable(props) {\n  const { classes } = props;\n\n  return (\n    <Paper className={classes.root}>\n      <Table className={classes.table}>\n        <TableHead>\n          <TableRow>\n            <TableCell numeric>Employee ID</TableCell>\n            <TableCell>First Name</TableCell>\n            <TableCell>Last Name</TableCell>\n            <TableCell>Address</TableCell>\n            <TableCell>Company</TableCell>\n            <TableCell numeric>Salary</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {props.employeesFromApp.map(employee => {\n            return (\n              <TableRow key={employee.employeeId}>\n                <TableCell component=\"th\" scope=\"row\" numeric>\n                  {employee.employeeId}\n                </TableCell>\n                <TableCell>{employee.firstName}</TableCell>\n                <TableCell>{employee.lastName}</TableCell>\n                <TableCell>{employee.address}</TableCell>\n                <TableCell>{employee.company}</TableCell>\n                <TableCell numeric>{employee.salary}</TableCell>\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </Paper>\n  );\n}\n\nSimpleTable.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(SimpleTable);\n","import React, { Component } from \"react\";\nimport MuiThemeProvider from \"material-ui/styles/MuiThemeProvider\";\nimport gql from \"graphql-tag\";\nimport { graphql, compose } from \"react-apollo\";\nimport EntryForm from \"./entryForm\";\nimport Table from \"./table\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TextField from \"material-ui/TextField\";\nimport Button from \"@material-ui/core/Button\";\n\nconst EmployeesQuery = gql`\n  {\n    employees {\n      employeeId\n      firstName\n      lastName\n      address\n      company\n      salary\n    }\n  }\n`;\n\nconst CreateEmployeeMutation = gql`\n  mutation(\n    $employeeId: Int!\n    $firstName: String!\n    $lastName: String!\n    $address: String\n    $company: String!\n    $salary: Int!\n  ) {\n    createEmployee(\n      employeeId: $employeeId\n      firstName: $firstName\n      lastName: $lastName\n      address: $address\n      company: $company\n      salary: $salary\n    ) {\n      employeeId\n      firstName\n      lastName\n      address\n      company\n      salary\n    }\n  }\n`;\n\nclass App extends Component {\n  state = {\n    company: \"\",\n    sum: \"\"\n  };\n\n  createEmployee = async employee => {\n    await this.props.createEmployee({\n      variables: {\n        employeeId: parseInt(employee.employeeId),\n        firstName: employee.firstName,\n        lastName: employee.lastName,\n        address: employee.address,\n        company: employee.company,\n        salary: parseInt(employee.salary)\n      },\n      update: (store, { data: { createEmployee } }) => {\n        // Read the data from our cache for this query.\n        const data = store.readQuery({ query: EmployeesQuery });\n        // Add our text from the mutation to the top.\n        data.employees.unshift(createEmployee);\n        // Write our data back to the cache.\n        store.writeQuery({ query: EmployeesQuery, data });\n      }\n    });\n  };\n\n  entryFormCallback = dataFromForm => {\n    this.createEmployee(dataFromForm);\n  };\n\n  change = e => {\n    // this.props.onChange({ [e.target.name]: e.target.value });\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  _handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      //console.log('do validate: ' + e.target.name);\n      this.costFunction();\n    }\n  }\n\n  onSubmit = e => {\n    e.preventDefault();\n    this.costFunction();\n    // clear form\n    this.setState({\n      company: \"\"\n    });\n  };\n\n  costFunction = () => {\n    const company = this.state.company;\n    const employees = this.props.data.employees;\n    var sum = 0;\n    for (var key in employees) {\n      if (employees[key].company === company) sum += employees[key].salary;\n    }\n\n    if (company != null && company.length > 0) {\n      this.setState({\n        sum: \"of \" + company + \" is \" + sum\n      });\n    } else {\n      this.setState({\n        sum: \"\"\n      });\n    }\n  };\n\n  render() {\n    const {\n      data: { loading, employees }\n    } = this.props;\n    if (loading) {\n      return null;\n    }\n    return (\n      <MuiThemeProvider>\n        <div className=\"App\">\n          <Grid\n            container\n            spacing={16}\n            alignItems=\"flex-start\"\n            direction=\"row\"\n            justify=\"center\"\n          >\n            <Grid key=\"1\" item>\n              <Paper\n                style={{\n                  margin: \"auto\",\n                  width: 300,\n                  paddingLeft: 10,\n                  paddingTop: 10,\n                  paddingBottom: 10\n                }}\n              >\n                <EntryForm callbackFromApp={this.entryFormCallback} />\n              </Paper>\n            </Grid>\n            <Grid key=\"2\" item>\n              <Paper\n                style={{\n                  width: 300,\n                  paddingLeft: 10,\n                  paddingTop: 10,\n                  paddingBottom: 10\n                }}\n              >\n              Cost {this.state.sum}\n              <br />\n                <form>\n                  <TextField\n                    name=\"company\"\n                    hintText=\"Company\"\n                    label=\"Company\"\n                    margin=\"normal\"\n                    value={this.state.company}\n                    onChange={e => this.change(e)}\n                    onKeyPress={e => {this._handleKeyPress(e)}}\n                    floatingLabelFixed\n                  />\n                  <br />\n                  <br />\n                  <Button\n                    variant=\"contained\"\n                    onClick={e => this.onSubmit(e)}\n                    primary=\"true\"\n                  >\n                    Calculate Sum\n                  </Button>\n                </form>\n              </Paper>\n            </Grid>\n          </Grid>\n          <Table employeesFromApp={employees} />\n          <br />\n          <br />\n        </div>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default compose(\n  graphql(CreateEmployeeMutation, { name: \"createEmployee\" }),\n  graphql(EmployeesQuery)\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst client = new ApolloClient({\n    uri: \"http://localhost:4000\"\n  }); \n  \nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}